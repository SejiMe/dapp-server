// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dengue.watch.api.infrastructure.database;

#nullable disable

namespace dengue.watch.api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250823221633_InitialMigration_PostgreSQL")]
    partial class InitialMigration_PostgreSQL
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dengue.watch.api.features.denguealerts.DengueAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Level");

                    b.HasIndex("Location");

                    b.ToTable("DengueAlerts");
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.AdministrativeArea", b =>
                {
                    b.Property<string>("PsgcCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("psgc_code");

                    b.Property<string>("GeographicLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("geographic_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("OldNames")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("old_names");

                    b.HasKey("PsgcCode")
                        .HasName("PK_administrative_areas");

                    b.ToTable("administrative_areas", (string)null);
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.DailyWeather", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<float>("Humidity")
                        .HasColumnType("real")
                        .HasColumnName("humidity");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<float>("Precipitation")
                        .HasColumnType("real")
                        .HasColumnName("precipitation");

                    b.Property<float>("Temperature")
                        .HasColumnType("real")
                        .HasColumnName("temperature");

                    b.Property<int>("WeatherCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("weather_code_id");

                    b.HasKey("Id");

                    b.HasIndex("WeatherCodeId");

                    b.HasIndex("Date", "Location")
                        .IsUnique();

                    b.ToTable("daily_weather", (string)null);
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.MonthlyDengueCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("case_count");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("integer")
                        .HasColumnName("month_number");

                    b.Property<string>("PsgcCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("psgc_code");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("PsgcCode");

                    b.HasIndex("Year", "MonthNumber", "PsgcCode")
                        .IsUnique();

                    b.ToTable("monthly_dengue_cases", (string)null);
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.WeatherCode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("MainDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("main_description");

                    b.Property<string>("SubDescription")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("sub_description");

                    b.HasKey("Id");

                    b.ToTable("weather_codes", (string)null);
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.WeeklyDengueCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CaseCount")
                        .HasColumnType("integer")
                        .HasColumnName("case_count");

                    b.Property<string>("PsgcCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("psgc_code");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer")
                        .HasColumnName("week_number");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("PsgcCode");

                    b.HasIndex("Year", "WeekNumber", "PsgcCode")
                        .IsUnique();

                    b.ToTable("weekly_dengue_cases", (string)null);
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.DailyWeather", b =>
                {
                    b.HasOne("dengue.watch.api.infrastructure.database.WeatherCode", "WeatherCode")
                        .WithMany("DailyWeather")
                        .HasForeignKey("WeatherCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WeatherCode");
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.MonthlyDengueCase", b =>
                {
                    b.HasOne("dengue.watch.api.infrastructure.database.AdministrativeArea", "AdministrativeArea")
                        .WithMany("MonthlyDengueCases")
                        .HasForeignKey("PsgcCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdministrativeArea");
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.WeeklyDengueCase", b =>
                {
                    b.HasOne("dengue.watch.api.infrastructure.database.AdministrativeArea", "AdministrativeArea")
                        .WithMany("WeeklyDengueCases")
                        .HasForeignKey("PsgcCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdministrativeArea");
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.AdministrativeArea", b =>
                {
                    b.Navigation("MonthlyDengueCases");

                    b.Navigation("WeeklyDengueCases");
                });

            modelBuilder.Entity("dengue.watch.api.infrastructure.database.WeatherCode", b =>
                {
                    b.Navigation("DailyWeather");
                });
#pragma warning restore 612, 618
        }
    }
}
